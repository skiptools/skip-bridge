skip:
  mode: 'native'
build:
  contents:
    # the location of the skipstone derived Swift package
    - 'val swiftPath = "src/main/swift"'
    - 'val skipCommand = System.getenv("SKIP_COMMAND_OVERRIDE") ?: ((System.getenv("__XCODE_BUILT_PRODUCTS_DIR_PATHS") ?: System.getenv("BUILT_PRODUCTS_DIR")) + "/../Debug/skip")'
    - 'val skipcmd = if(file(skipCommand).exists()) skipCommand else "skip"'
    - 'var swiftBuildConfig = "debug"'
    - 'fun swiftBuildFolder(): String { return layout.buildDirectory.get().asFile.absolutePath }'

    # A project that has bridging modules will have extra["bridgeModules"] set in the settings.gradle.kts
    # We only want to build for the first (root) module, since any other builds would be redundant
    # We use this to only build the native libraries a single time rather that once for each dependent module.
    - 'fun rootBridgeModule(): String? { val bridgeModules: List<String>? by gradle.extra; return bridgeModules?.first() }'
    - 'fun isRootBridgeModule(): Boolean { return rootBridgeModule() == "${project.name}" }'

    - block: 'android'
      contents:
        - block: 'sourceSets'
          contents:
            - block: 'getByName("main")'
              contents:
                # ${buildDir}/jni-libs is the folder where our toolchain outputs the natively-compiled .so files
                - 'jniLibs.srcDir("${swiftBuildFolder()}/jni-libs")'
        - block: 'packaging'
          contents:
            - block: 'jniLibs'
              contents:
                # doNotStrip is needed to prevent errors like: java.lang.UnsatisfiedLinkError: dlopen failed: empty/missing DT_HASH/DT_GNU_HASH in "/data/app/â€¦/base.apk!/lib/arm64-v8a/libdispatch.so" (new hash type from the future?) (see: https://github.com/finagolfin/swift-android-sdk/issues/67)
                # also seems to affect libandroid-spawn.so
                - 'keepDebugSymbols.add("**/*.so")'
                # pickFirsts needed to prevent errors like: 2 files found with path 'lib/arm64-v8a/libSkipAndroidBridge.so' from inputs
                # note that this only needs to be enabled if we are using multiple JNI output folders,
                # which we currently avoif using the SKIP_BRIDGE_ANDROID_BUILT semaphore
                #- 'pickFirsts.add("**/*.so")'
        - block: 'buildTypes'
          contents:
            - block: 'release'
              contents:
                - 'swiftBuildConfig = "release"'
            - block: 'debug'
              contents:
                - 'swiftBuildConfig = "debug"'
        # the SKIP_BRIDGE_MODULES is included in the AndroidManifest.xml app metadata and is used by SkipBridge to load the root module on app startup
        - block: 'defaultConfig'
          contents:
            - 'manifestPlaceholders["SKIP_BRIDGE_MODULES"] = rootBridgeModule() ?: ""'

    - block: 'tasks.configureEach'
      contents:
        # When building the APK, depend on the skip android toolchain build of the root bridge module
        - block: 'if ((name == "mergeDebugJniLibFolders" || name == "mergeReleaseJniLibFolders") && (System.getenv("SKIP_BRIDGE_ANDROID_BUILD_DISABLED") != "1") && (isRootBridgeModule() == true))'
          contents:
            - 'dependsOn("buildAndroidSwiftPackage")'

    - block: 'tasks.register("buildAndroidSwiftPackage")'
      contents:
        - block: 'doLast'
          contents:
            - block: 'project.exec'
              contents:
                # the -module-cache-path and -no-clang-module-breadcrumbs flag is needed to avoid this sort of error with `skip export`:
                # <unknown>:0: error: PCH was compiled with module cache path '/opt/src/github/skiptools/skip-bridge/.build/plugins/outputs/skip-bridge/SkipBridgeToSwiftSamples/destination/skipstone/SkipBridgeToSwiftSamplesHelpers/build/swift/aarch64-unknown-linux-android24/debug/ModuleCache/336QL0GS3Q4T0', but the path is currently '/opt/src/github/skiptools/skip-bridge/.build/plugins/outputs/skip-bridge/SkipBridgeToSwiftSamplesTestsSupport/destination/skipstone/SkipBridgeToSwiftSamplesHelpers/build/swift/aarch64-unknown-linux-android24/debug/ModuleCache/336QL0GS3Q4T0'
                - 'commandLine("sh", "-cx", "${skipcmd} android build -d ${swiftBuildFolder()}/jni-libs --package-path ${swiftPath} --configuration ${swiftBuildConfig} --product ${project.name} --scratch-path ${swiftBuildFolder()}/swift --arch automatic -Xcc -fPIC -Xswiftc -DSKIP_BRIDGE -Xswiftc -Xfrontend -Xswiftc -no-clang-module-breadcrumbs -Xswiftc -Xfrontend -Xswiftc -module-cache-path -Xswiftc -Xfrontend -Xswiftc ${swiftBuildFolder()}/swift/module-cache/${project.name}")'
                - 'environment("SKIP_BRIDGE", "1")'
                # for local transpiler development, we need to ensure that the tool we are using is the locally-built skip, and not the one that is downloaded from the binary package
                # TODO: figure out how to implement this for swiftpm command-line builds
                - 'if (file(skipCommand).exists()) { environment("SKIP_COMMAND_OVERRIDE", skipCommand) }'

    # For test cases, we compile locally with `swift build` against the derived Swift project
    - block: 'tasks.withType<Test>'
      contents:
        - 'jvmArgs("-verbose:jni")'
        - 'jvmArgs("-Xcheck:jni")'
        # only perform a single build for the entire multi-module project
        - block: 'if ((System.getenv("SKIP_BRIDGE_ROBOLECTRIC_BUILD_DISABLED") != "1") && (isRootBridgeModule() == true))'
          contents:
            - 'dependsOn("buildLocalSwiftPackage")'

    - block: 'tasks.register("buildLocalSwiftPackage")'
      contents:
        - block: 'doLast'
          contents:
            # Output the environment (for debugging)
            - 'System.getenv().toSortedMap().forEach { key, value -> println("${key}=\"${value}\"") }'
            - block: 'project.exec'
              contents:
                # build for local macOS in order to run tests
                - 'commandLine("sh", "-cx", "swift build --package-path ${swiftPath} --configuration ${swiftBuildConfig} --product ${project.name} -Xcc -fPIC -Xswiftc -DSKIP_BRIDGE -Xswiftc -DROBOLECTRIC -Xswiftc -Xfrontend -Xswiftc -no-clang-module-breadcrumbs --scratch-path ${swiftBuildFolder()}/swift")'
                - 'environment("SKIP_BRIDGE", "1")'
                # for local transpiler development, we need to ensure that the tool we are using is the locally-built skip, and not the one that is downloaded from the binary package
                # TODO: figure out how to implement this for swiftpm command-line builds
                - 'if (file(skipCommand).exists()) { environment("SKIP_COMMAND_OVERRIDE", skipCommand) }'
